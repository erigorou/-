// ---------------------------------------------
// クエストマネージャークラスの実装
// ---------------------------------------------

#include "pch.h"
#include "QuestManager.h"
#include "../Scene/PlayScene.h"
#include "QuestRenderer/QuestRenderer.h"

#include "Interface/IQuestChecker.h"
#include "QuestList/QuestPlayerMove.h"
#include "QuestList/QuestPlayerAttack.h"
#include "QuestList/QuestPlayerCombo.h"
#include "QuestList/QuestPlayerAvoid.h"


#include "Libraries/MyLib/DebugString.h"


// -----------------------------
// コンストラクタ
// -----------------------------
QuestManager::QuestManager(PlayScene* playScene)
	: m_playScene(playScene)
	, m_currentQuestNo()	// ★
{
}


// -----------------------------
// デストラクタ
// -----------------------------
QuestManager::~QuestManager()
{
}


// -----------------------------
// クエストの初期化
// -----------------------------
void QuestManager::InitializeQuest()
{
	// クエストリストの作成
	CreateQuestList_1st();

	// クエスト内容の描画オブジェクト
	m_renderer = std::make_unique<QuestRenderer>(this);
	// 初期化処理
	m_renderer->Initialize(m_textureList[0]);
}

// -----------------------------
// 更新処理
// -----------------------------
void QuestManager::Update(float elapsedTime)
{
	// クエストの更新
	UpdateQuest();

	// 描画の更新
	m_renderer->Update(elapsedTime);
}


// -----------------------------
// クエストの更新
// -----------------------------
void QuestManager::UpdateQuest()
{
	m_renderer->IsClear(true);

	// クエストの更新
	if (m_currentQuestNo < m_questList.size())
	{
		// クエストの実行
		auto quest = m_questList[m_currentQuestNo];

		// クエストのクリアを描画オブジェクトに通知
		m_renderer->IsClear(quest->ExecuteChecker(m_playScene));
	}
}


// -----------------------------
// クエストを一つ更新する
// -----------------------------
void QuestManager::ChangeNextQuest()
{
	// クエストを１つ進める
	m_currentQuestNo++;

	// クエストが最後まで行っていない場合
	if (m_currentQuestNo < m_questList.size())
	{
		// クエストの描画
		m_renderer->ChangeTexture(m_textureList[m_currentQuestNo]);
	}
	else
	{
		// クエストクリア
	}
}



// -----------------------------
// クエストの描画
// -----------------------------
void QuestManager::DrawQuest()
{
	// クエストの描画
	m_renderer->Draw();
}


// -----------------------------
// クエストマネージャーの終了
// -----------------------------
void QuestManager::Finalize()
{
}


// -----------------------------------
// クエストリストの作成 ステージ１
// -----------------------------------
void QuestManager::CreateQuestList_1st()
{
	// クエストデータの消去
	ClearQuestData();

	// クエストの作成
	m_questList.push_back(new QuestPlayerMove	());
	m_questList.push_back(new QuestPlayerAttack	());
	m_questList.push_back(new QuestPlayerCombo	());
	m_questList.push_back(new QuestPlayerAvoid	());

	// クエストの中のテクスチャを読み込む
	AddQuestTexture();
}


// -----------------------------------
// クエストリストの作成 ステージ２
// -----------------------------------

void QuestManager::CreateQuestList_2nd()
{
	// クエストデータの消去
	ClearQuestData();
}


// -----------------------------------
// クエストリストの作成 ステージ３
// -----------------------------------

void QuestManager::CreateQuestList_3rd()
{
	// クエストデータの消去
	ClearQuestData();
}

// -----------------------------------
// クエストのテクスチャを読み込む
// -----------------------------------
void QuestManager::AddQuestTexture()
{
	// 設定したクエストから全て抜き出す
	for (auto quest : m_questList)
	{
		// テクスチャの読み込み
		Microsoft::WRL::ComPtr<ID3D11ShaderResourceView> texture;

		DX::ThrowIfFailed(
			DirectX::CreateWICTextureFromFile(
				CommonResources::GetInstance()->GetDeviceResources()->GetD3DDevice(),
				quest->GetTexturePath(),
				nullptr,
				texture.ReleaseAndGetAddressOf()
			)
		);

		// テクスチャリストに追加
		m_textureList.push_back(texture);
	}
}


// -----------------------------------
// クエストデータの消去
// -----------------------------------
void QuestManager::ClearQuestData()
{
	// クエストリストを全て削除する
	for (auto quest : m_questList)
	{
		delete quest;
	}

	// 画像リストをすべて削除する
	for (auto texture : m_textureList)
	{
		texture.Reset();
	}

	// クエストリストとテクスチャリストをクリアする
	m_questList.clear();
	m_textureList.clear();
}
