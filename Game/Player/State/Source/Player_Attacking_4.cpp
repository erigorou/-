/// ---------------------------------------
///
/// プレイヤーが攻撃をする処理
///
/// ---------------------------------------

#include "pch.h"
#include <cassert>
#include "Game/CommonResources.h"
#include "DeviceResources.h"
#include "Libraries/MyLib/DebugString.h"
#include "Libraries/MyLib/Math.h"

#include "Game/Player/Player.h"
#include "Game/Enemy/Enemy.h"
#include "Game/Player/State/Header/Player_Attacking_4.h"
 

// コンストラクタ
PlayerAttacking_4::PlayerAttacking_4(Player* player)
	:
	 m_player(player)
	,m_totalSeconds()
	,m_attackElapsedTime(0.0f)
	,m_model()
	,m_boundingSphereBody()
{
}

// デストラクタ
PlayerAttacking_4::~PlayerAttacking_4()
{
}


// 初期化処理
void PlayerAttacking_4::Initialize(DirectX::Model* model)
{
	// モデルを取得する
	m_model = model;
	// 体の境界球を作成
	m_boundingSphereBody = DirectX::BoundingSphere();
	m_boundingSphereBody.Radius = Player::PLAYER_SCALE * 12.f;

}

// 事前更新処理
void PlayerAttacking_4::PreUpdate()
{
	// 経過時間の初期化
	m_totalSeconds = 0.f;
}

// 更新処理
void PlayerAttacking_4::Update(const float& elapsedTime,  DirectX::SimpleMath::Vector3& parentPos)
{
	// parentPos使わないけどエラー出さないでねって文
	UNREFERENCED_PARAMETER(parentPos);

	// 時間を計測し、一定時間経過でステートを遷移
	m_player->TimeComparison(m_totalSeconds, Player::APPLIED_ATTACK_TIME, m_player->GetPlayerIdlingState(), elapsedTime);
	
	// めり込み量を計算し、それを座標に反映させる（押し戻す）
	parentPos += CalculatingPushBack();
	// 体の境界球の位置を更新
	m_boundingSphereBody.Center = parentPos;
}


// 事後更新処理
void PlayerAttacking_4::PostUpdate()
{
	// 修正点があればここに記載
}


// 描画処理
void PlayerAttacking_4::Render(
	ID3D11DeviceContext* context,
	DirectX::CommonStates* states,
	const DirectX::SimpleMath::Matrix& view,
	const DirectX::SimpleMath::Matrix& projection
	)
{
	UNREFERENCED_PARAMETER(context);
	UNREFERENCED_PARAMETER(states);
	UNREFERENCED_PARAMETER(view);
	UNREFERENCED_PARAMETER(projection);
	UNREFERENCED_PARAMETER(m_model);

	// コモンリソースを取得する
	CommonResources* resources = CommonResources::GetInstance();


	// デバッグ情報を「DebugString」で表示する
	auto debugString = resources->GetDebugString();
	debugString->AddString("Attack 4");
}


// 終了処理
void PlayerAttacking_4::Finalize()
{
}

// 体に当たったときに押し戻しをする
DirectX::SimpleMath::Vector3 PlayerAttacking_4::CalculatingPushBack()
{
	// プレイヤーを一度変換する
	auto player = dynamic_cast<Player*>(m_player);
	// ボディを取得						プレイヤー → シーン → エネミー → 現在のステート → 体の当たり判定
	DirectX::BoundingSphere enemyBody = player->GetPlayScene()->GetEnemy()->GetCurrentState()->GetBoundingSphereBody();
	// 押し戻し量の計測
	return Math::pushBack_BoundingSphere(m_boundingSphereBody, enemyBody);
}