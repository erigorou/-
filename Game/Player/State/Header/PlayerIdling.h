#pragma once
#ifndef PLAYER_IDLING_DEFINED
#define PLAYER_IDLING_DEFINED
// -----------------------------
//
// プレイヤーの待機状態
//
// -----------------------------


#pragma once
#include "pch.h"
#include "Interface/IState.h"

class Player;
class Enemy;

class PlayerIdling : public IState
{
public:
	// 体の当たり判定を取得
	DirectX::BoundingSphere GetBoundingSphereBody() { return m_boundingSphereBody; };

public:
	// デストラクタ
	~PlayerIdling() override;
	// 初期化する
	void Initialize(DirectX::Model* model) override;
	// 事前更新する
	void PreUpdate() override;
	// 更新処理する
	void Update(const float& elapsedTime, DirectX::SimpleMath::Vector3& parentPos) override;
	// 事後更新する
	void PostUpdate() override;
	// 描画する
	void Render(
		ID3D11DeviceContext* context,
		DirectX::CommonStates* states,
		const DirectX::SimpleMath::Matrix& view,
		const DirectX::SimpleMath::Matrix& projection) override;
	// 終了処理
	void Finalize() override;


	// コンストラクタ
	PlayerIdling(Player* player);
	// 体と当たったときの処理
	DirectX::SimpleMath::Vector3 CalculatingPushBack();

private:
	// 総時間
	float m_totalSeconds;
	// プレイヤー
	Player* m_player;
	// モデル
	DirectX::Model* m_model;
	// 体の当たり判定
	DirectX::BoundingSphere m_boundingSphereBody;

	// キーボードの入力
	DirectX::Keyboard::State m_keyboardState;
};

#endif  // PLAYER_IDLING_DEFINED