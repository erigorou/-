

#include "pch.h"
#include "Messenger.h"

// キーボード観察者リストを初期化する
std::vector<std::pair<DirectX::Keyboard::Keys, IObserver*>> Messenger::s_observerList;
// キー範囲リスト(キー、開始インデックスと終了インデックス)
std::unordered_map<DirectX::Keyboard::Keys, std::vector<std::pair<int, int>>> Messenger::s_keysRangeList;


// 観察者をアタッチする
void Messenger::Attach(const DirectX::Keyboard::Keys& key, IObserver* observer)
{
    // 観察者リストに観察者を追加する
    s_observerList.emplace_back(key, observer);
}

// 観察者をデタッチする
void Messenger::Detach(const DirectX::Keyboard::Keys& key, IObserver* observer)
{
    // 観察者リストから観察者を検索する
    s_observerList.erase(
        std::remove_if(s_observerList.begin(), s_observerList.end(),
            [key, observer](const std::pair<DirectX::Keyboard::Keys, IObserver*>& entry)
            {
                return entry.first == key && entry.second == observer;
            }),
        s_observerList.end());
}



// 観察者に通知する
void Messenger::Notify(const DirectX::Keyboard::State& keyboardState)
{
    // 観察者リストから観察者を取り出す
    for (const auto& keyRange : s_keysRangeList)
    {
        // 観察者が処理すべきキーかどうかを調べる
        if (keyboardState.IsKeyDown(keyRange.first))
        {
            // キーの開始インデックスから終了インデックスまでのインデックスを取り出す
            for (const auto& range : keyRange.second)
            {
                for (int i = range.first; i <= range.second; ++i)
                {
                    // 観察者の通知関数に押し下げられたキーを通知する
                    s_observerList[i].second->OnKeyPressed(s_observerList[i].first);
                }
            }
        }
    }
}

// 観察者リストをソートする
void Messenger::SortObserverList()
{
    // 観察者リストをソートする
    std::sort(
        s_observerList.begin(),
        s_observerList.end(),
        [](const std::pair<DirectX::Keyboard::Keys, IObserver*>& a, const std::pair<DirectX::Keyboard::Keys, IObserver*>& b)
        {
            return a.first < b.first;
        });
}


// キー範囲リストを生成する
void Messenger::CreateKeyRangeList()
{
    // キー範囲をクリアする
	if (s_keysRangeList.size()) s_keysRangeList.clear();
    // 開始インデックスを設定する
	int startIndex = 0;
    // 観察者リストの開始キーを現在のキーにする
    DirectX::Keyboard::Keys currentKey = s_observerList[startIndex].first;
    for (int index = 1; index < s_observerList.size(); index++)
    {
        // 観察者リストの現在キーと現在のキーが等しくない場合
        if (s_observerList[index].first != currentKey)
        {
            // キー、開始インデックスと終了インデックスをキー範囲リストに追加する
            s_keysRangeList[currentKey].push_back(std::make_pair(startIndex, index - 1));
            // 現在のインデックスを開始インデックスに設定する
            startIndex = index;
            // 現在の観察者のキーを現在のキーに設定する
            currentKey = s_observerList[index].first;
        }
    }
    // キー、開始インデックスと最後のインデックスをキー範囲リストに追加する
    s_keysRangeList[currentKey].push_back(std::make_pair(startIndex, s_observerList.size() - 1));
}